What is kubernates?
Ans:- Kubernates is an opensource Platform design to automated Deploying scaling and oprating application container.

Explain kubernate architature?
Ans:- Kubernetes is an open-source container deployment and administration platform
ts architecture follows a master-worker (or control plane-node) model, where the Control Plane manages the cluster, and Worker Nodes run the applications.
Control plane component (master node) - 
 API Server
Entry point for all commands (kubectl, REST).
Validates and configures data for the rest of the system.
Communicates with etcd, controllers, and nodes.

etcd
Key-value store (like a database) that stores all cluster data and configurations.
Stores state information like nodes, pods, secrets, config maps, etc.

Scheduler
Assigns newly created pods to available nodes based on resource needs, affinity rules, etc.

Controller Manager
Runs controllers that watch the cluster state and make changes:
Node Controller: Checks node health.
ReplicaSet Controller: Ensures the desired number of pod replicas.
Deployment Controller: Manages updates/rollbacks.
Job Controller, etc.

Worker Node Components
kubelet
Agent running on each node.
Ensures the containers are running in the pod as expected.
Talks to the container runtime (e.g. Docker)

kube-proxy
Maintains networking rules on each node.
Handles communication between services and pods (load-balancing, routing).

 Container Runtime
Runs the containers.
]Examples: Docker, containerd, CRI-O.

 Pods
Smallest deployable unit in Kubernetes.
Can contain one or more containers.
Managed by Deployments, ReplicaSets, StatefulSets, etc.

3 . Explain the concept of Container Orchestration?
Container orchestration is the automated process of deploying, managing, scaling, networking, and monitoring containers. 

What is a Pod in Kubernetes?
A cluster of one or more Linux containers makes up a Kubernetes pod, the smallest unit of a Kubernetes application.

How does Kubernetes handle container scaling?
To automatically scale the workload to match demand, a Horizontal Pod Autoscaling in Kubernetes updates 
a workload resource (such a deployment or stateful set). Horizontal scaling indicates that more pods are added in response to an increase in load.

What is Kubelet?
Kubelet is an important component of Kubernetes that manages containers within pods on a node.

 Explain the difference between a StatefulSet and a Deployment.
Deployment :-
 Best for stateless applications (e.g., web frontends, APIs)

Key Characteristics:
Pod Identity: Pods are interchangeable. They do not retain a fixed identity.
Pod Names: Randomly generated (e.g., nginx-deployment-65fbbdffbb-pvlgk)
Scaling: Easy horizontal scaling by increasing replicas.
Storage: Typically uses ephemeral or shared volumes; no persistent volume per pod by default.
Rolling Updates: Supports rolling updates, blue-green deployments, and rollback.

 StatefulSet
Best for stateful applications (e.g., databases like MySQL, Cassandra)

Key Characteristics:
Pod Identity: Each pod has a stable, unique identity (hostname, network identity, and storage).
Pod Names: Predictable and ordered (e.g., mysql-0, mysql-1, mysql-2)
Stable Storage: Each pod can have its own PersistentVolume (retained even after pod is deleted).
Ordered Deployment: Pods are created, deleted, and scaled in a defined order (important for clustered apps).
Rolling Updates: Supports updates, but in a controlled, sequential manner.

difference between deployment vs replica set?
 ReplicaSet
Purpose: Ensures a specified number of identical pod replicas are always running.
Key Characteristics:
Maintains desired replica count.
Automatically replaces failed pods.
Does not support updates or rollback natively.
Used internally by Deployments.
Rarely used directly by users.

 Deployment
Purpose: Manages ReplicaSets and provides versioning, updates, and rollback capabilities.
Key Characteristics:
Manages ReplicaSets under the hood.
Supports rolling updates, rollbacks, and pause/resume strategies.
Provides higher-level abstraction than ReplicaSet.
Recommended for stateless applications that may need version upgrades.

 What is a Service in Kubernetes?
Service Type	Description
ClusterIP :- 	Default. Accessible only inside the cluster (internal communication between services).
NodePort :- 	Exposes the service on a static port on each Node (external access via <NodeIP>:<Port>).
LoadBalancer :- 	Creates an external load balancer (cloud providers only) and assigns a public IP.
ExternalName :-	Maps the service to a DNS name (e.g., external-service.example.com) using CNAME.
Headless	 :- No ClusterIP assigned; used for stateful apps or direct pod discovery.

How does Kubernetes manage configuration?
ConfigMap
Purpose: Store non-sensitive configuration data (e.g., app settings, environment variables).
Use Case: Pass configuration data to pods as environment variables, command-line arguments, or mounted files.
Secret
Purpose: Store sensitive information (e.g., passwords, API keys, TLS certs) securely.
Use Case: Similar to ConfigMaps, but data is base64-encoded and stored securely.
Environment Variables in Pod Specs
You can set static or dynamic (from ConfigMap/Secret) environment variables in your pod definitions.
Volumes
Both ConfigMap and Secret can be mounted into pods as volumes, allowing apps to read configuration as files.

Describe the role of a Master node in Kubernetes?
The Master Node, also known as the Control Plane, is the brain of the Kubernetes cluster. 
It is responsible for managing the entire cluster's state, scheduling workloads, and handling cluster-level decisions

Feature	Master Node (Control Plane)	Worker Node
Purpose	Cluster orchestration 
Runs Pods? Usually no (only system pods, sometimes)	
Components 	API Server, etcd, Scheduler, Controllers	

Worker node
Runs actual workloads (containers)
Runs Pods? Yes (app pods run here)
Components kubelet, kube-proxy, container runtime

What is a Namespace in Kubernetes?
A Namespace in Kubernetes is a virtual cluster inside a physical Kubernetes cluster. 
It allows you to divide cluster resources between multiple users, teams, or applications â€” similar to creating logical partitions.

Command	Description
(kubectl get ns) 	List all namespaces
(kubectl create namespace dev)	  Create a new namespace
(kubectl delete namespace dev) 	Delete a namespace and all its resources
(kubectl get pods -n dev)  	Get pods in the dev namespace
(kubectl config set-context --current --namespace=dev)	  Set default namespace for current context





