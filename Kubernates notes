What is kubernates?
Ans:- Kubernates is an opensource Platform design to automated Deploying scaling and oprating application container.

Explain kubernate architature?
Ans:- Kubernetes is an open-source container deployment and administration platform
ts architecture follows a master-worker (or control plane-node) model, where the Control Plane manages the cluster, and Worker Nodes run the applications.
Control plane component (master node) - 
 API Server
Entry point for all commands (kubectl, REST).
Validates and configures data for the rest of the system.
Communicates with etcd, controllers, and nodes.

etcd
Key-value store (like a database) that stores all cluster data and configurations.
Stores state information like nodes, pods, secrets, config maps, etc.

Scheduler
Assigns newly created pods to available nodes based on resource needs, affinity rules, etc.

Controller Manager
Runs controllers that watch the cluster state and make changes:
Node Controller: Checks node health.
ReplicaSet Controller: Ensures the desired number of pod replicas.
Deployment Controller: Manages updates/rollbacks.
Job Controller, etc.

Worker Node Components
kubelet
Agent running on each node.
Ensures the containers are running in the pod as expected.
Talks to the container runtime (e.g. Docker)

kube-proxy
Maintains networking rules on each node.
Handles communication between services and pods (load-balancing, routing).

 Container Runtime
Runs the containers.
]Examples: Docker, containerd, CRI-O.

 Pods
Smallest deployable unit in Kubernetes.
Can contain one or more containers.
Managed by Deployments, ReplicaSets, StatefulSets, etc.

3 . Explain the concept of Container Orchestration?
Container orchestration is the automated process of deploying, managing, scaling, networking, and monitoring containers. 

What is a Pod in Kubernetes?
A cluster of one or more Linux containers makes up a Kubernetes pod, the smallest unit of a Kubernetes application.

How does Kubernetes handle container scaling?
To automatically scale the workload to match demand, a Horizontal Pod Autoscaling in Kubernetes updates 
a workload resource (such a deployment or stateful set). Horizontal scaling indicates that more pods are added in response to an increase in load.

What is Kubelet?
Kubelet is an important component of Kubernetes that manages containers within pods on a node.

 Explain the difference between a StatefulSet and a Deployment.
Deployment :-
 Best for stateless applications (e.g., web frontends, APIs)

Key Characteristics:
Pod Identity: Pods are interchangeable. They do not retain a fixed identity.
Pod Names: Randomly generated (e.g., nginx-deployment-65fbbdffbb-pvlgk)
Scaling: Easy horizontal scaling by increasing replicas.
Storage: Typically uses ephemeral or shared volumes; no persistent volume per pod by default.
Rolling Updates: Supports rolling updates, blue-green deployments, and rollback.

 StatefulSet
Best for stateful applications (e.g., databases like MySQL, Cassandra)

Key Characteristics:
Pod Identity: Each pod has a stable, unique identity (hostname, network identity, and storage).
Pod Names: Predictable and ordered (e.g., mysql-0, mysql-1, mysql-2)
Stable Storage: Each pod can have its own PersistentVolume (retained even after pod is deleted).
Ordered Deployment: Pods are created, deleted, and scaled in a defined order (important for clustered apps).
Rolling Updates: Supports updates, but in a controlled, sequential manner.





